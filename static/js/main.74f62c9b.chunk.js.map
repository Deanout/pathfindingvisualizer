{"version":3,"sources":["pathfindingvisualizer/node/node.jsx","algorithms/dijkstra.js","partials/simpleselect.jsx","partials/toolbar.jsx","partials/console.jsx","algorithms/recursivewalls.js","pathfindingvisualizer/pathfindingvisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","onMouseDown","isStart","isFinish","isWall","onMouseEnter","onMouseUp","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","BootstrapInput","withStyles","theme","root","width","margin","input","borderRadius","position","backgroundColor","color","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","useStyles","makeStyles","display","flexWrap","spacing","SimpleSelect","classes","React","useState","algorithm","setAlgorithm","autoComplete","FormControl","Select","value","onChange","event","target","name","MenuItem","PfvToolbar","styled","Toolbar","background","PfvBrand","Typography","marginTop","marginBottom","marginRight","PfvButton","Button","PfvConfigButton","PfvStartNodeButton","IconButton","height","PfvFinishNodeButton","PfvWallNodeButton","ToolBar","state","pfv","console","AppBar","Grid","container","item","xs","variant","onClick","visualizeDijkstra","size","nodeType","recursiveWalls","init","Console","nodesToAnimate","recursiveWallBuilder","startNodeRow","startNodeCol","endNodeRow","endNodeCol","wall","air","coords","currentRow","i","walls","helper","inputCoords","x1","x2","y1","y2","WALL","AIR","bisection","Bisect","max","Max","min","Min","passage","Passage","first","second","Math","floor","random","a","b","ceil","GRID_WIDTH","GRID_HEIGHT","PathfindingVisualizer","mouseIsPressed","startPosition","finishPosition","consoleElement","document","getElementById","consoleBottom","getBoundingClientRect","bottom","veritcalNodeReduction","window","innerWidth","innerHeight","style","toString","getInitialGrid","setState","toggleStartPosition","toggleFinishPosition","drawGrid","addEventListener","key","toLowerCase","newGrid","getNewGridWithStartToggled","getNewGridWithFinishToggled","toggleNodeType","toggleNode","getNewGridWithNodeToggled","getNewGridWithNodeToggledOff","getNewGridWithNodeToggledOn","getNewGridWithDistancesReset","nodesInShortestPathOrder","setTimeout","animateShortestPath","modifyNode","resetDistances","start","performance","now","end","renderTextToConsole","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","openingTag","closingTag","content","toFixed","innerHTML","scrollTo","scrollHeight","clearBoard","newClass","toggleNodeOff","classToRemove","classList","remove","removeClassFromNode","animateWalls","context","splice","toolBar","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","createNode","isShortest","slice","newNode","oldPosition","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74f62c9b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp\r\n    } = this.props;\r\n    /*\r\n    const extraClassName = isFinish\r\n      ? `node-finish`\r\n      : isStart\r\n      ? `node-start`\r\n      : isWall\r\n      ? `node-wall`\r\n      : \"\";*/\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","/* Dijkstra's algorithm takes three parameters:\r\n * grid - The list of nodes you could potentially visit\r\n * startNode - The initial node that you are traveling from\r\n * finishNode - The final node you will finish at\r\n *\r\n * Overview:\r\n * Dijkstra's works by initially giving every node a\r\n * cost of infinity except for the starting node.\r\n * You then iterate over every non-infinite cost node = currentNode\r\n * and give their neighbors a cost of:\r\n * neighborCost = currentNode.cost + 1\r\n * and set isVisited to true, which removes it from the list.\r\n *\r\n * If you use a proper data structure, you should have a reference\r\n * chain that gives you the shortest--lowest cost--path.\r\n *\r\n * Additionally, we want the order that every node was visited in,\r\n * because it allows us to animate the nodes.\r\n *\r\n * Notes:\r\n * If you're using weights, however, you can replace the 1 with\r\n * 1 + weight, or simply the weight, and everything works the same.\r\n */\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  // The list of visited nodes to animate over\r\n  const visitedNodesInOrder = [];\r\n\r\n  // Set the initial node's distance to 0.\r\n  startNode.distance = 0;\r\n  // The list of unvisited nodes\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) {\r\n      continue;\r\n    }\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode != null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst BootstrapInput = withStyles(theme => ({\r\n  root: {\r\n    width: 140,\r\n    margin: \"auto\"\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: \"relative\",\r\n    backgroundColor: \"#3EC3FF\",\r\n    color: \"white\",\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n    padding: \"10px 26px 10px 12px\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"'\r\n    ].join(\",\"),\r\n    \"&:focus\": {\r\n      borderRadius: 4,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\r\n      backgroundColor: \"#3EC3FF\",\r\n      color: \"white\"\r\n    }\r\n  }\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nexport default function SimpleSelect() {\r\n  const classes = useStyles();\r\n  const [algorithm, setAlgorithm] = React.useState(0);\r\n  const handleChange = event => {\r\n    setAlgorithm(event.target.value);\r\n  };\r\n  return (\r\n    <form className={classes.root} autoComplete=\"off\">\r\n      <FormControl className={classes.margin}>\r\n        <Select\r\n          value={algorithm}\r\n          onChange={handleChange}\r\n          input={<BootstrapInput name=\"algorithm\" id=\"age-customized-select\" />}\r\n        >\r\n          <MenuItem value={0}>\r\n            <em>Algorithms</em>\r\n          </MenuItem>\r\n          <MenuItem value={1}>Dijkstra's Algorithm</MenuItem>\r\n          <MenuItem value={2}>A* Search</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\nimport SimpleSelect from \"./simpleselect\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst PfvToolbar = styled(Toolbar)({\r\n  background: \"linear-gradient(45deg, #2c3e50 30%, #3498db 90%)\",\r\n  border: 0,\r\n  borderRadius: 3,\r\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\r\n  color: \"white\"\r\n});\r\n\r\nconst PfvBrand = styled(Typography)({\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\",\r\n  marginRight: \"1em\"\r\n});\r\n\r\nconst PfvButton = styled(Button)({\r\n  width: 140,\r\n  margin: \"auto\",\r\n  background: \"#3EC3FF\"\r\n});\r\n\r\nconst PfvConfigButton = styled(Button)({\r\n  width: 140,\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\",\r\n  marginRight: \"1em\"\r\n});\r\n\r\nconst PfvStartNodeButton = styled(IconButton)({\r\n  height: 24,\r\n  width: 24,\r\n  background: \"#009605\"\r\n});\r\nconst PfvFinishNodeButton = styled(IconButton)({\r\n  height: 24,\r\n  width: 24,\r\n  background: \"#139ceb\"\r\n});\r\nconst PfvWallNodeButton = styled(IconButton)({\r\n  height: 24,\r\n  width: 24,\r\n  background: \"#0c3547\"\r\n});\r\n\r\nexport default class ToolBar extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      pfv: props.pfv,\r\n      console: props.console\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\">\r\n          <PfvToolbar>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={6}>\r\n                <PfvBrand variant=\"h6\">Pathfinding Visualizer</PfvBrand>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <SimpleSelect>Algorithms</SimpleSelect>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <PfvButton\r\n                  color=\"inherit\"\r\n                  onClick={() => this.state.pfv.visualizeDijkstra()}\r\n                >\r\n                  Visualize Algo\r\n                </PfvButton>\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <PfvStartNodeButton\r\n                  size=\"small\"\r\n                  onClick={() => (this.state.pfv.state.nodeType = \"S\")}\r\n                ></PfvStartNodeButton>\r\n                Start\r\n              </Grid>\r\n\r\n              <Grid item xs={1}>\r\n                <PfvFinishNodeButton\r\n                  onClick={() => (this.state.pfv.state.nodeType = \"F\")}\r\n                ></PfvFinishNodeButton>\r\n                Finish\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <PfvWallNodeButton\r\n                  onClick={() => (this.state.pfv.state.nodeType = \"W\")}\r\n                ></PfvWallNodeButton>\r\n                Wall\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <PfvConfigButton\r\n                  color=\"inherit\"\r\n                  onClick={() => this.state.pfv.recursiveWalls()}\r\n                >\r\n                  Make Maze\r\n                </PfvConfigButton>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <PfvConfigButton\r\n                  color=\"inherit\"\r\n                  onClick={() => this.state.pfv.init(true)}\r\n                >\r\n                  Clear Board\r\n                </PfvConfigButton>\r\n              </Grid>\r\n            </Grid>\r\n          </PfvToolbar>\r\n        </AppBar>\r\n        {this.state.console}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Console extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return <div className=\"console\" id=\"console\"></div>;\r\n  }\r\n}\r\n","var nodesToAnimate = [];\r\nexport function recursiveWallBuilder(\r\n  width,\r\n  height,\r\n  startNodeRow,\r\n  startNodeCol,\r\n  endNodeRow,\r\n  endNodeCol,\r\n  wall,\r\n  air\r\n) {\r\n  const coords = [];\r\n  nodesToAnimate = [];\r\n\r\n  for (let row = 0; row < height; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < width; col++) {\r\n      currentRow.push(air);\r\n    }\r\n    coords.push(currentRow);\r\n  }\r\n  for (let i = 0; i < width; i++) {\r\n    nodesToAnimate.push([0, i]);\r\n    coords[0][i] = wall;\r\n  }\r\n  for (let i = 1; i < height; i++) {\r\n    nodesToAnimate.push([i, width - 1]);\r\n    coords[i][width - 1] = wall;\r\n  }\r\n  for (let i = width - 2; i >= 0; i--) {\r\n    nodesToAnimate.push([height - 1, i]);\r\n    coords[height - 1][i] = wall;\r\n  }\r\n  for (let i = height - 2; i > 0; i--) {\r\n    nodesToAnimate.push([i, 0]);\r\n    coords[i][0] = wall;\r\n  }\r\n\r\n  const walls = helper(coords, 0, width - 1, 0, height - 1, wall, air);\r\n  walls[startNodeRow][startNodeCol] = air;\r\n  walls[endNodeRow][endNodeCol] = air;\r\n  return nodesToAnimate;\r\n}\r\n\r\nfunction helper(inputCoords, x1, x2, y1, y2, WALL, AIR) {\r\n  let width = x2 - x1;\r\n  let height = y2 - y1;\r\n\r\n  if (width >= height) {\r\n    // Vertical bisection\r\n    if (x2 - x1 > 3) {\r\n      let bisection = Bisect(x1, x2);\r\n      let max = Max(y2);\r\n      let min = Min(y1);\r\n      let passage = Passage(max, min);\r\n      let first = false;\r\n      let second = false;\r\n\r\n      if (inputCoords[y2][bisection] === AIR) {\r\n        passage = max;\r\n        first = true;\r\n      }\r\n      if (inputCoords[y1][bisection] === AIR) {\r\n        passage = min;\r\n        second = true;\r\n      }\r\n\r\n      for (let i = y1 + 1; i < y2; i++) {\r\n        if (first && second) {\r\n          if (i === max || i === min) {\r\n            inputCoords[i][bisection] = AIR;\r\n          }\r\n        } else if (i === passage) {\r\n          inputCoords[i][bisection] = AIR;\r\n        } else {\r\n          nodesToAnimate.push([i, bisection]);\r\n          inputCoords[i][bisection] = WALL;\r\n        }\r\n      }\r\n      helper(inputCoords, x1, bisection, y1, y2, WALL, AIR);\r\n      helper(inputCoords, bisection, x2, y1, y2, WALL, AIR);\r\n    }\r\n  } else {\r\n    if (y2 - y1 > 3) {\r\n      let bisection = Bisect(y1, y2);\r\n      let max = Max(x2);\r\n      let min = Min(x1);\r\n      let passage = Passage(max, min);\r\n      let first = false;\r\n      let second = false;\r\n\r\n      if (inputCoords[bisection][x2] === AIR) {\r\n        passage = max;\r\n        first = true;\r\n      }\r\n      if (inputCoords[bisection][x1] === AIR) {\r\n        passage = min;\r\n        second = true;\r\n      }\r\n\r\n      for (let i = x1 + 1; i < x2; i++) {\r\n        if (first && second) {\r\n          if (i === max || i === min) {\r\n            inputCoords[bisection][i] = AIR;\r\n          }\r\n        } else if (i === passage) {\r\n          inputCoords[bisection][i] = AIR;\r\n        } else {\r\n          nodesToAnimate.push([bisection, i]);\r\n          inputCoords[bisection][i] = WALL;\r\n        }\r\n      }\r\n      helper(inputCoords, x1, x2, y1, bisection, WALL, AIR);\r\n      helper(inputCoords, x1, x2, bisection, y2, WALL, AIR);\r\n    }\r\n  }\r\n\r\n  return inputCoords;\r\n}\r\n\r\nfunction Passage(max, min) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction Bisect(a, b) {\r\n  return Math.ceil((a + b) / 2);\r\n}\r\n\r\nfunction Max(a) {\r\n  return a - 1;\r\n}\r\n\r\nfunction Min(a) {\r\n  return a + 1;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node/node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport Toolbar from \"../partials/toolbar\";\r\nimport Console from \"../partials/console\";\r\nimport { recursiveWallBuilder } from \"../algorithms/recursivewalls\";\r\n\r\nimport \"./pathfindingvisualizer.css\";\r\nvar GRID_WIDTH = 5;\r\nvar GRID_HEIGHT = 5;\r\n\r\nconst NODE_SIZE = 25;\r\n\r\nconst NODE = `node`;\r\nconst NODE_START = `node-start`;\r\nconst NODE_FINISH = `node-finish`;\r\nconst NODE_WALL = `node-wall`;\r\nconst NODE_VISITED = `node-visited`;\r\nconst NODE_SHORTEST_PATH = `node-shortest-path`;\r\n\r\nconst WALL = \"W\";\r\nconst AIR = \"A\";\r\nconst START = \"S\";\r\nconst FINISH = \"F\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      nodeType: WALL,\r\n      startPosition: [0, 0],\r\n      finishPosition: [0, 1]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let consoleElement = document.getElementById(\"console\");\r\n    if (consoleElement) {\r\n      let consoleBottom = consoleElement.getBoundingClientRect().bottom;\r\n      let veritcalNodeReduction = consoleBottom / NODE_SIZE;\r\n      GRID_WIDTH = Math.floor(window.innerWidth / NODE_SIZE);\r\n      GRID_HEIGHT = Math.floor(\r\n        window.innerHeight / NODE_SIZE - veritcalNodeReduction\r\n      );\r\n\r\n      document.getElementById(\"grid\").style.height =\r\n        (window.innerHeight - consoleBottom).toString() + \"px\";\r\n      const grid = getInitialGrid(\r\n        this.state.startPosition,\r\n        this.state.finishPosition\r\n      );\r\n      this.setState({ grid: grid }, () => {\r\n        this.toggleStartPosition(3, 3);\r\n        this.toggleFinishPosition(GRID_HEIGHT - 3, GRID_WIDTH - 3);\r\n        this.drawGrid();\r\n      });\r\n    }\r\n    document.addEventListener(\"keydown\", event => {\r\n      switch (event.key.toLowerCase()) {\r\n        case \"s\":\r\n          this.setState({ nodeType: START });\r\n          break;\r\n        case \"w\":\r\n          this.setState({ nodeType: WALL });\r\n          break;\r\n        case \"f\":\r\n          this.setState({ nodeType: FINISH });\r\n          break;\r\n        default:\r\n          this.setState({ nodeType: WALL });\r\n          break;\r\n      }\r\n      this.drawGrid();\r\n    });\r\n  }\r\n\r\n  toggleStartPosition(row, col) {\r\n    const newGrid = getNewGridWithStartToggled(\r\n      this.state.grid,\r\n      row,\r\n      col,\r\n      this.state.startPosition\r\n    );\r\n    this.setState({\r\n      grid: newGrid,\r\n      mouseIsPressed: false,\r\n      startPosition: [row, col]\r\n    });\r\n  }\r\n\r\n  toggleFinishPosition(row, col) {\r\n    const newGrid = getNewGridWithFinishToggled(\r\n      this.state.grid,\r\n      row,\r\n      col,\r\n      this.state.finishPosition\r\n    );\r\n    this.setState({\r\n      grid: newGrid,\r\n      mouseIsPressed: false,\r\n      finishPosition: [row, col]\r\n    });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    this.toggleNodeType(row, col);\r\n    this.drawGrid();\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    this.toggleNodeType(row, col);\r\n    this.drawGrid();\r\n  }\r\n\r\n  toggleNodeType(row, col) {\r\n    switch (this.state.nodeType) {\r\n      case WALL:\r\n        this.toggleNode(row, col);\r\n        break;\r\n      case START:\r\n        this.toggleStartPosition(row, col);\r\n        break;\r\n      case FINISH:\r\n        this.toggleFinishPosition(row, col);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  toggleNode(row, col) {\r\n    const newGrid = getNewGridWithNodeToggled(this.state.grid, row, col);\r\n\r\n    this.setState({ grid: newGrid, mouseIsPressed: false });\r\n  }\r\n\r\n  toggleNodeOff(row, col) {\r\n    const newGrid = getNewGridWithNodeToggledOff(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: false });\r\n  }\r\n\r\n  toggleNodeAnimated(row, col) {\r\n    const newGrid = getNewGridWithNodeToggledOn(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  resetDistances() {\r\n    const newGrid = getNewGridWithDistancesReset(this.state.grid);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        this.modifyNode(node, false, NODE_VISITED);\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        this.modifyNode(node, false, NODE_SHORTEST_PATH);\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    this.resetDistances();\r\n    const { grid } = this.state;\r\n    const startNode =\r\n      grid[this.state.startPosition[0]][this.state.startPosition[1]];\r\n    const finishNode =\r\n      grid[this.state.finishPosition[0]][this.state.finishPosition[1]];\r\n    this.init(false);\r\n    let start = performance.now();\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    let end = performance.now();\r\n\r\n    this.renderTextToConsole(\r\n      \"Dijkstra's Algorithm\",\r\n      start,\r\n      end,\r\n      `<p class=\"statistic-text\">`,\r\n      `</p>`\r\n    );\r\n\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.resetDistances();\r\n  }\r\n\r\n  renderTextToConsole(algorithm, start, end, openingTag, closingTag) {\r\n    let time = (end - start).toFixed(2).toString();\r\n    let content = \"Runtime of \" + algorithm + \": \" + time + \" ms.\";\r\n    let consoleElement = document.getElementById(\"console\");\r\n    consoleElement.innerHTML += openingTag + content + closingTag;\r\n    consoleElement.scrollTo(0, consoleElement.scrollHeight);\r\n  }\r\n\r\n  modifyNode(node, clearBoard, newClass) {\r\n    if (clearBoard) {\r\n      document.getElementById(\r\n        `node-${node.row}-${node.col}`\r\n      ).className = `${newClass}`;\r\n    } else {\r\n      document.getElementById(\r\n        `node-${node.row}-${node.col}`\r\n      ).className += ` ${newClass}`;\r\n    }\r\n  }\r\n\r\n  init(clearBoard) {\r\n    const { grid } = this.state;\r\n\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        let node = grid[row][col];\r\n\r\n        // If you're clearing the board and the node is a wall\r\n        // but it is not the start node or finish node, then\r\n        // toggle the node.\r\n        if (clearBoard && node.isWall && !(node.isStart || node.isFinish)) {\r\n          this.toggleNodeOff(row, col);\r\n        }\r\n      }\r\n    }\r\n    this.drawGrid(clearBoard);\r\n  }\r\n\r\n  removeClassFromNode(node, classToRemove) {\r\n    document\r\n      .getElementById(`node-${node.row}-${node.col}`)\r\n      .classList.remove(classToRemove);\r\n  }\r\n\r\n  drawGrid(clearBoard) {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        let node = grid[row][col];\r\n        if (node.isWall) {\r\n          this.modifyNode(node, true, `node node-wall`);\r\n        } else {\r\n          this.removeClassFromNode(node, NODE_WALL);\r\n        }\r\n        if (node.isStart) {\r\n          this.modifyNode(node, true, `node node-start`);\r\n        } else {\r\n          this.removeClassFromNode(node, NODE_START);\r\n        }\r\n        if (node.isFinish) {\r\n          this.modifyNode(node, true, `node node-finish`);\r\n        } else {\r\n          this.removeClassFromNode(node, NODE_FINISH);\r\n        }\r\n        if (clearBoard) {\r\n          this.removeClassFromNode(node, NODE_VISITED);\r\n          this.removeClassFromNode(node, NODE_SHORTEST_PATH);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  recursiveWalls() {\r\n    this.init(true);\r\n    const nodesToAnimate = recursiveWallBuilder(\r\n      GRID_WIDTH,\r\n      GRID_HEIGHT,\r\n      this.state.startPosition[0],\r\n      this.state.startPosition[1],\r\n      this.state.finishPosition[0],\r\n      this.state.finishPosition[1],\r\n      WALL,\r\n      AIR\r\n    );\r\n\r\n    this.animateWalls(nodesToAnimate);\r\n\r\n    this.toggleStartPosition(\r\n      this.state.startPosition[0],\r\n      this.state.startPosition[1]\r\n    );\r\n    this.toggleFinishPosition(\r\n      this.state.finishPosition[0],\r\n      this.state.finishPosition[1]\r\n    );\r\n  }\r\n  animateWalls(nodesToAnimate) {\r\n    const context = this;\r\n    for (let i = 0; i < nodesToAnimate.length; i++) {\r\n      if (\r\n        this.state.grid[nodesToAnimate[i][0]][[nodesToAnimate[i][1]]].isStart ||\r\n        this.state.grid[nodesToAnimate[i][0]][[nodesToAnimate[i][1]]].isFinish\r\n      ) {\r\n        nodesToAnimate.splice(i, 1);\r\n        continue;\r\n      }\r\n      setTimeout(() => {\r\n        context.modifyNode(\r\n          context.state.grid[nodesToAnimate[i][0]][nodesToAnimate[i][1]],\r\n          true,\r\n          `node node-wall`\r\n        );\r\n      }, 25 * i);\r\n      this.toggleNode(nodesToAnimate[i][0], nodesToAnimate[i][1]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    const console = <Console></Console>;\r\n    const toolBar = <Toolbar pfv={this} console={console}></Toolbar>;\r\n    return (\r\n      <>\r\n        {toolBar}\r\n        <div id=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"row\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = (startPosition, finishPosition) => {\r\n  const grid = [];\r\n  for (let row = 0; row < GRID_HEIGHT; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < GRID_WIDTH; col++) {\r\n      currentRow.push(createNode(row, col, startPosition, finishPosition));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col, startPosition, finishPosition) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === startPosition[0] && col === startPosition[1],\r\n    isFinish: row === finishPosition[0] && col === finishPosition[1],\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\nconst getNewGridWithDistancesReset = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row of newGrid) {\r\n    for (let node of row) {\r\n      node.distance = Infinity;\r\n      node.isVisited = false;\r\n      node.isShortest = false;\r\n      node.previousNode = null;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithNodeToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithNodeToggledOff = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: false\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithNodeToggledOn = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: false,\r\n    isFinish: false,\r\n    isWall: true\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithStartToggled = (grid, row, col, oldPosition) => {\r\n  grid[oldPosition[0]][oldPosition[1]].isStart = false;\r\n  grid[row][col].isFinish = false;\r\n  grid[row][col].isWall = false;\r\n  grid[row][col].isStart = true;\r\n  return grid;\r\n};\r\nconst getNewGridWithFinishToggled = (grid, row, col, oldPosition) => {\r\n  grid[oldPosition[0]][oldPosition[1]].isFinish = false;\r\n  grid[row][col].isStart = false;\r\n  grid[row][col].isWall = false;\r\n  grid[row][col].isFinish = true;\r\n  return grid;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./pathfindingvisualizer/pathfindingvisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}