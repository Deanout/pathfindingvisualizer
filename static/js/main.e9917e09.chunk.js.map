{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/Dijkstra.js","partials/SimpleSelect.jsx","partials/toolbar.jsx","partials/console.jsx","algorithms/RecursiveWalls.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isStart","isFinish","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","BootstrapInput","withStyles","theme","root","width","margin","input","borderRadius","position","backgroundColor","color","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","useStyles","makeStyles","display","flexWrap","spacing","SimpleSelect","classes","React","useState","algorithm","setAlgorithm","autoComplete","FormControl","Select","value","onChange","event","target","name","MenuItem","PfvToolbar","styled","Toolbar","background","flexGrow","PfvBrand","Typography","marginTop","marginBottom","marginRight","PfvButton","Button","PfvConfigButton","ToolBar","state","pfv","console","AppBar","Grid","container","item","xs","variant","onClick","visualizeDijkstra","recursiveWalls","init","Console","recursiveWallBuilder","height","startNodeRow","startNodeCol","endNodeRow","endNodeCol","wall","air","coords","currentRow","i","walls","helper","inputCoords","x1","x2","y1","y2","WALL","AIR","bisection","Bisect","max","Max","min","Min","passage","Passage","first","second","Math","floor","random","a","b","ceil","GRID_WIDTH","GRID_HEIGHT","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","mouseIsPressed","start","end","consoleElement","document","getElementById","consoleBottom","getBoundingClientRect","bottom","veritcalNodeReduction","window","innerWidth","innerHeight","log","style","toString","getInitialGrid","setState","toggleWall","newGrid","getNewGridWithWallToggled","getNewGridWithoutWall","getNewGridWithWall","getNewGridWithDistancesReset","nodesInShortestPathOrder","setTimeout","animateShortestPath","modifyNode","resetDistances","performance","now","renderTextToConsole","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","openingTag","closingTag","content","toFixed","innerHTML","scrollTo","scrollHeight","clearBoard","newClass","numWalls","output","toolBar","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","createNode","isShortest","slice","newNode","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9917e09.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? `node-finish`\r\n      : isStart\r\n      ? `node-start`\r\n      : isWall\r\n      ? `node-wall`\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","/* Dijkstra's algorithm takes three parameters:\r\n * grid - The list of nodes you could potentially visit\r\n * startNode - The initial node that you are traveling from\r\n * finishNode - The final node you will finish at\r\n *\r\n * Overview:\r\n * Dijkstra's works by initially giving every node a\r\n * cost of infinity except for the starting node.\r\n * You then iterate over every non-infinite cost node = currentNode\r\n * and give their neighbors a cost of:\r\n * neighborCost = currentNode.cost + 1\r\n * and set isVisited to true, which removes it from the list.\r\n *\r\n * If you use a proper data structure, you should have a reference\r\n * chain that gives you the shortest--lowest cost--path.\r\n *\r\n * Additionally, we want the order that every node was visited in,\r\n * because it allows us to animate the nodes.\r\n *\r\n * Notes:\r\n * If you're using weights, however, you can replace the 1 with\r\n * 1 + weight, or simply the weight, and everything works the same.\r\n */\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  // The list of visited nodes to animate over\r\n  const visitedNodesInOrder = [];\r\n\r\n  // Set the initial node's distance to 0.\r\n  startNode.distance = 0;\r\n  // The list of unvisited nodes\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) {\r\n      continue;\r\n    }\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode != null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst BootstrapInput = withStyles(theme => ({\r\n  root: {\r\n    width: 140,\r\n    margin: \"auto\"\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: \"relative\",\r\n    backgroundColor: \"#3EC3FF\",\r\n    color: \"white\",\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n    padding: \"10px 26px 10px 12px\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"'\r\n    ].join(\",\"),\r\n    \"&:focus\": {\r\n      borderRadius: 4,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\r\n      backgroundColor: \"#3EC3FF\",\r\n      color: \"white\"\r\n    }\r\n  }\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nexport default function SimpleSelect() {\r\n  const classes = useStyles();\r\n  const [algorithm, setAlgorithm] = React.useState(0);\r\n  const handleChange = event => {\r\n    setAlgorithm(event.target.value);\r\n  };\r\n  return (\r\n    <form className={classes.root} autoComplete=\"off\">\r\n      <FormControl className={classes.margin}>\r\n        <Select\r\n          value={algorithm}\r\n          onChange={handleChange}\r\n          input={<BootstrapInput name=\"algorithm\" id=\"age-customized-select\" />}\r\n        >\r\n          <MenuItem value={0}>\r\n            <em>Algorithms</em>\r\n          </MenuItem>\r\n          <MenuItem value={1}>Dijkstra's Algorithm</MenuItem>\r\n          <MenuItem value={2}>A* Search</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\nimport SimpleSelect from \"./SimpleSelect\";\r\n\r\nconst PfvToolbar = styled(Toolbar)({\r\n  background: \"linear-gradient(45deg, #2c3e50 30%, #3498db 90%)\",\r\n  border: 0,\r\n  borderRadius: 3,\r\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\r\n  color: \"white\",\r\n  padding: \"0 30px\",\r\n  flexGrow: 1\r\n});\r\n\r\nconst PfvBrand = styled(Typography)({\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\",\r\n  marginRight: \"1em\"\r\n});\r\n\r\nconst PfvButton = styled(Button)({\r\n  width: 140,\r\n  margin: \"auto\",\r\n  background: \"#3EC3FF\"\r\n});\r\n\r\nconst PfvConfigButton = styled(Button)({\r\n  width: 140,\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\",\r\n  marginRight: \"1em\"\r\n});\r\n\r\nexport default class ToolBar extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      pfv: props.pfv,\r\n      console: props.console\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\">\r\n          <PfvToolbar>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={6}>\r\n                <PfvBrand variant=\"h6\">Pathfinding Visualizer</PfvBrand>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <SimpleSelect>Algorithms</SimpleSelect>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <PfvButton\r\n                  color=\"inherit\"\r\n                  onClick={() => this.state.pfv.visualizeDijkstra()}\r\n                >\r\n                  Visualize Algo\r\n                </PfvButton>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <PfvConfigButton\r\n                  color=\"inherit\"\r\n                  onClick={() => this.state.pfv.recursiveWalls()}\r\n                >\r\n                  Make Maze\r\n                </PfvConfigButton>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <PfvConfigButton\r\n                  color=\"inherit\"\r\n                  onClick={() => this.state.pfv.init(true)}\r\n                >\r\n                  Clear Board\r\n                </PfvConfigButton>\r\n              </Grid>\r\n            </Grid>\r\n          </PfvToolbar>\r\n        </AppBar>\r\n        {this.state.console}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Console extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return <div className=\"console\" id=\"console\"></div>;\r\n  }\r\n}\r\n","export function recursiveWallBuilder(\r\n  width,\r\n  height,\r\n  startNodeRow,\r\n  startNodeCol,\r\n  endNodeRow,\r\n  endNodeCol,\r\n  wall,\r\n  air\r\n) {\r\n  const coords = [];\r\n  for (let row = 0; row < height; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < width; col++) {\r\n      currentRow.push(air);\r\n    }\r\n    coords.push(currentRow);\r\n  }\r\n  for (let i = 0; i < width; i++) {\r\n    coords[0][i] = wall;\r\n    coords[height - 1][i] = wall;\r\n  }\r\n  for (let i = 1; i < height - 1; i++) {\r\n    coords[i][0] = wall;\r\n    coords[i][width - 1] = wall;\r\n  }\r\n\r\n  const walls = helper(coords, 0, width - 1, 0, height - 1, wall, air);\r\n  walls[startNodeRow][startNodeCol] = air;\r\n  walls[endNodeRow][endNodeCol] = air;\r\n  return walls;\r\n}\r\n\r\nfunction helper(inputCoords, x1, x2, y1, y2, WALL, AIR) {\r\n  let width = x2 - x1;\r\n  let height = y2 - y1;\r\n\r\n  if (width >= height) {\r\n    // Vertical bisection\r\n    if (x2 - x1 > 3) {\r\n      let bisection = Bisect(x1, x2);\r\n      let max = Max(y2);\r\n      let min = Min(y1);\r\n      let passage = Passage(max, min);\r\n      let first = false;\r\n      let second = false;\r\n\r\n      if (inputCoords[y2][bisection] === AIR) {\r\n        passage = max;\r\n        first = true;\r\n      }\r\n      if (inputCoords[y1][bisection] === AIR) {\r\n        passage = min;\r\n        second = true;\r\n      }\r\n\r\n      for (let i = y1 + 1; i < y2; i++) {\r\n        if (first && second) {\r\n          if (i === max || i === min) {\r\n            inputCoords[i][bisection] = AIR;\r\n          }\r\n        } else if (i === passage) {\r\n          inputCoords[i][bisection] = AIR;\r\n        } else {\r\n          inputCoords[i][bisection] = WALL;\r\n        }\r\n      }\r\n      helper(inputCoords, x1, bisection, y1, y2, WALL, AIR);\r\n      helper(inputCoords, bisection, x2, y1, y2, WALL, AIR);\r\n    }\r\n  } else {\r\n    if (y2 - y1 > 3) {\r\n      let bisection = Bisect(y1, y2);\r\n      let max = Max(x2);\r\n      let min = Min(x1);\r\n      let passage = Passage(max, min);\r\n      let first = false;\r\n      let second = false;\r\n\r\n      if (inputCoords[bisection][x2] === AIR) {\r\n        passage = max;\r\n        first = true;\r\n      }\r\n      if (inputCoords[bisection][x1] === AIR) {\r\n        passage = min;\r\n        second = true;\r\n      }\r\n\r\n      for (let i = x1 + 1; i < x2; i++) {\r\n        if (first && second) {\r\n          if (i === max || i === min) {\r\n            inputCoords[bisection][i] = AIR;\r\n          }\r\n        } else if (i === passage) {\r\n          inputCoords[bisection][i] = AIR;\r\n        } else {\r\n          inputCoords[bisection][i] = WALL;\r\n        }\r\n      }\r\n      helper(inputCoords, x1, x2, y1, bisection, WALL, AIR);\r\n      helper(inputCoords, x1, x2, bisection, y2, WALL, AIR);\r\n    }\r\n  }\r\n\r\n  return inputCoords;\r\n}\r\n\r\nfunction Passage(max, min) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction Bisect(a, b) {\r\n  return Math.ceil((a + b) / 2);\r\n}\r\n\r\nfunction Max(a) {\r\n  return a - 1;\r\n}\r\n\r\nfunction Min(a) {\r\n  return a + 1;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/Dijkstra\";\r\nimport Toolbar from \"../partials/toolbar\";\r\nimport Console from \"../partials/console\";\r\nimport { recursiveWallBuilder } from \"../algorithms/RecursiveWalls\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\nvar GRID_WIDTH = 5;\r\nvar GRID_HEIGHT = 5;\r\n\r\nconst NODE_SIZE = 25;\r\n\r\nvar START_NODE_ROW = 3;\r\nvar START_NODE_COL = 4;\r\nvar FINISH_NODE_ROW = GRID_HEIGHT - START_NODE_ROW;\r\nvar FINISH_NODE_COL = GRID_WIDTH - START_NODE_COL;\r\n\r\nconst START_NODE = `node-start`;\r\nconst FINISH_NODE = `node-finish`;\r\nconst NODE_VISITED = `node-visited`;\r\nconst NODE_SHORTEST_PATH = `node-shortest-path`;\r\n\r\nconst WALL = \"W\";\r\nconst AIR = \"A\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      start: 0,\r\n      end: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let consoleElement = document.getElementById(\"console\");\r\n    if (consoleElement) {\r\n      let consoleBottom = consoleElement.getBoundingClientRect().bottom;\r\n      let veritcalNodeReduction = consoleBottom / NODE_SIZE;\r\n      GRID_WIDTH = Math.floor(window.innerWidth / NODE_SIZE);\r\n      GRID_HEIGHT = Math.floor(\r\n        window.innerHeight / NODE_SIZE - veritcalNodeReduction\r\n      );\r\n      console.log(GRID_HEIGHT);\r\n      START_NODE_ROW = 3;\r\n      START_NODE_COL = 4;\r\n      FINISH_NODE_ROW = GRID_HEIGHT - START_NODE_ROW;\r\n      FINISH_NODE_COL = GRID_WIDTH - START_NODE_COL;\r\n      document.getElementById(\"grid\").style.height =\r\n        (window.innerHeight - consoleBottom).toString() + \"px\";\r\n      const grid = getInitialGrid();\r\n      this.setState({ grid });\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    this.toggleWall(row, col);\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  toggleWall(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: false });\r\n  }\r\n\r\n  removeWall(row, col) {\r\n    const newGrid = getNewGridWithoutWall(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: false });\r\n  }\r\n\r\n  makeWall(row, col) {\r\n    const newGrid = getNewGridWithWall(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: false });\r\n  }\r\n\r\n  resetDistances() {\r\n    const newGrid = getNewGridWithDistancesReset(this.state.grid);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        this.modifyNode(node, false, NODE_VISITED);\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        this.modifyNode(node, false, NODE_SHORTEST_PATH);\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    this.resetDistances();\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    this.init(false);\r\n    let start = performance.now();\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    let end = performance.now();\r\n    let algorithm = \"Dijkstra's Algorithm\";\r\n    this.renderTextToConsole(\r\n      algorithm,\r\n      start,\r\n      end,\r\n      `<p class=\"statistic-text\">`,\r\n      `</p>`\r\n    );\r\n\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.resetDistances();\r\n  }\r\n\r\n  renderTextToConsole(algorithm, start, end, openingTag, closingTag) {\r\n    let time = (end - start).toFixed(2).toString();\r\n    let content = \"Runtime of \" + algorithm + \": \" + time + \" ms.\";\r\n    let console = document.getElementById(\"console\");\r\n    console.innerHTML += openingTag + content + closingTag;\r\n    console.scrollTo(0, console.scrollHeight);\r\n  }\r\n\r\n  modifyNode(node, clearBoard, newClass) {\r\n    if (clearBoard) {\r\n      document.getElementById(\r\n        `node-${node.row}-${node.col}`\r\n      ).className = `${newClass}`;\r\n    } else {\r\n      document.getElementById(\r\n        `node-${node.row}-${node.col}`\r\n      ).className += ` ${newClass}`;\r\n    }\r\n  }\r\n\r\n  init(clearBoard) {\r\n    const { grid } = this.state;\r\n    let numWalls = 0;\r\n\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        let node = grid[row][col];\r\n\r\n        if (clearBoard && node.isWall) {\r\n          numWalls++;\r\n          this.toggleWall(row, col);\r\n        } else if (!clearBoard && node.isWall) {\r\n        } else if (clearBoard && !node.isWall) {\r\n          this.modifyNode(node, clearBoard, `node`);\r\n        } else {\r\n          this.modifyNode(node, clearBoard, `node`);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"Toggled: \" + numWalls + \" walls.\");\r\n\r\n    this.modifyNode(grid[START_NODE_ROW][START_NODE_COL], false, START_NODE);\r\n    this.modifyNode(grid[FINISH_NODE_ROW][FINISH_NODE_COL], false, FINISH_NODE);\r\n  }\r\n\r\n  recursiveWalls() {\r\n    this.init(true);\r\n\r\n    const output = recursiveWallBuilder(\r\n      GRID_WIDTH,\r\n      GRID_HEIGHT,\r\n      START_NODE_ROW,\r\n      START_NODE_COL,\r\n      FINISH_NODE_ROW,\r\n      FINISH_NODE_COL,\r\n      WALL,\r\n      AIR\r\n    );\r\n    let numWalls = 0;\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        if (output[row][col] === WALL) {\r\n          this.toggleWall(row, col);\r\n          numWalls++;\r\n        }\r\n      }\r\n    }\r\n    //console.log(\"Created: \" + numWalls + \" walls.\");\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    const console = <Console></Console>;\r\n    const toolBar = <Toolbar pfv={this} console={console}></Toolbar>;\r\n    return (\r\n      <>\r\n        {toolBar}\r\n        <div id=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"row\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < GRID_HEIGHT; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < GRID_WIDTH; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\nconst getNewGridWithDistancesReset = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row of newGrid) {\r\n    for (let node of row) {\r\n      node.distance = Infinity;\r\n      node.isVisited = false;\r\n      node.isShortest = false;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithoutWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: false\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: true\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nfunction offset(input) {\r\n  var rect = input.getBoundingClientRect(),\r\n    scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\r\n    scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}