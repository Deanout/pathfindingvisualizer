{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","partials/toolbar.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PfvToolbar","styled","Toolbar","background","border","borderRadius","boxShadow","color","height","padding","PfvBrand","Typography","marginTop","marginBottom","marginRight","PfvButton","Button","width","margin","PfvConfigButton","ToolBar","state","pfv","AppBar","position","variant","onClick","visualizeDijkstra","init","GRID_WIDTH","Math","floor","window","innerWidth","GRID_HEIGHT","innerHeight","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","mouseIsPressed","console","log","toString","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","clearBoard","classList","componentDidMount","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbdc75db.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? `node-finish`\r\n      : isStart\r\n      ? `node-start`\r\n      : isWall\r\n      ? `node-wall`\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","/* Dijkstra's algorithm takes three parameters:\r\n * grid - The list of nodes you could potentially visit\r\n * startNode - The initial node that you are traveling from\r\n * finishNode - The final node you will finish at\r\n *\r\n * Overview:\r\n * Dijkstra's works by initially giving every node a\r\n * cost of infinity except for the starting node.\r\n * You then iterate over every non-infinite cost node = currentNode\r\n * and give their neighbors a cost of:\r\n * neighborCost = currentNode.cost + 1\r\n * and set isVisited to true, which removes it from the list.\r\n *\r\n * If you use a proper data structure, you should have a reference\r\n * chain that gives you the shortest--lowest cost--path.\r\n *\r\n * Additionally, we want the order that every node was visited in,\r\n * because it allows us to animate the nodes.\r\n *\r\n * Notes:\r\n * If you're using weights, however, you can replace the 1 with\r\n * 1 + weight, or simply the weight, and everything works the same.\r\n */\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  // The list of visited nodes to animate over\r\n  const visitedNodesInOrder = [];\r\n  // Set the initial node's distance to 0.\r\n  startNode.distance = 0;\r\n  // The list of unvisited nodes\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) {\r\n      continue;\r\n    }\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode != null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\n\r\nconst PfvToolbar = styled(Toolbar)({\r\n  background: \"linear-gradient(45deg, #2c3e50 30%, #3498db 90%)\",\r\n  border: 0,\r\n  borderRadius: 3,\r\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\r\n  color: \"white\",\r\n  height: 48,\r\n  padding: \"0 30px\"\r\n});\r\n\r\nconst PfvBrand = styled(Typography)({\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\",\r\n  marginRight: \"1em\"\r\n});\r\n\r\nconst PfvButton = styled(Button)({\r\n  width: 140,\r\n  margin: \"auto\",\r\n  background: \"#3EC3FF\"\r\n});\r\n\r\nconst PfvConfigButton = styled(Button)({\r\n  width: 140,\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\",\r\n  marginRight: \"1em\"\r\n});\r\n\r\nexport default class ToolBar extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      pfv: props.pfv\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\">\r\n          <PfvToolbar>\r\n            <PfvBrand variant=\"h6\">Pathfinding Visualizer</PfvBrand>\r\n            <PfvButton\r\n              color=\"inherit\"\r\n              onClick={() => this.state.pfv.visualizeDijkstra()}\r\n            >\r\n              Visualize Algo\r\n            </PfvButton>\r\n            <PfvConfigButton\r\n              color=\"inherit\"\r\n              onClick={() => this.state.pfv.init(true)}\r\n            >\r\n              Clear Board\r\n            </PfvConfigButton>\r\n          </PfvToolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport Toolbar from \"../partials/toolbar\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst GRID_WIDTH = Math.floor(window.innerWidth / 25);\r\nconst GRID_HEIGHT = Math.floor(window.innerHeight / 25) - 3;\r\n\r\nconst START_NODE_ROW = GRID_HEIGHT / 5;\r\nconst START_NODE_COL = GRID_WIDTH / 5;\r\nconst FINISH_NODE_ROW = GRID_HEIGHT - 5;\r\nconst FINISH_NODE_COL = GRID_WIDTH - 7;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false\r\n    };\r\n    console.log(\"Height: \" + window.innerHeight.toString());\r\n    console.log(\"Width: \" + window.innerWidth.toString());\r\n    console.log(\"Number of Nodes: \" + getInitialGrid().length.toString());\r\n    console.log(\"grid_w: \" + GRID_WIDTH.toString());\r\n    console.log(\"grid_h: \" + GRID_HEIGHT.toString());\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) {\r\n      return;\r\n    }\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className = `node node-visited`;\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className = `node node-shortest-path`;\r\n      }, 50 * i);\r\n    }\r\n  }\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    this.init(false);\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  init(clearBoard) {\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        let node = document.getElementById(`node-${row}-${col}`);\r\n        if (\r\n          node.className === `node node-visited` ||\r\n          node.className === `node node-shortest-path` ||\r\n          (node.classList === `node node-wall` && clearBoard)\r\n        ) {\r\n          node.className = `node`;\r\n        }\r\n      }\r\n    }\r\n    if (clearBoard) {\r\n      this.componentDidMount();\r\n    }\r\n    document.getElementById(\r\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n    ).className = `node node-start`;\r\n    document.getElementById(\r\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n    ).className = `node node-finish`;\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Toolbar pfv={this}></Toolbar>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < GRID_WIDTH; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < GRID_HEIGHT; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}